// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "clientExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  not_activated
  activated
}

enum UserRole {
  regular
  moderator
  admin
}

model User {
  id                  Int        @id @default(autoincrement())
  status              UserStatus @default(not_activated)
  username            String     @unique
  password            String
  emailActivationCode String?    @unique
  email               String?
  role                UserRole @default(regular)

  profile UserProfile?
  buses Bus[]
  garages Garage[]
  stations Station[]
  lines Line[]
  lineStops LineStop[]
  stationSigns StationSign[]
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  birthDate DateTime
  bio       String   @db.Text
  gender    String
  location  String
  website   String

  userId       Int @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Bus {
  id           Int    @id @default(autoincrement())
  manufacturer String
  model        String
  fuel         String // DIESEL, BATTERY_ELECTRIC, CABLE_ELECTRIC
  inventoryNum String
  licensePlate String
  garageId     Int

  garage Garage @relation(fields: [garageId], references: [id])

  ownerId       Int @default(0)
  owner   User   @relation(fields: [ownerId], references: [id])
}

model Garage {
  id            Int    @id @default(autoincrement())
  name          String
  location      String
  capacity      Int    @default(0)
  buses         Bus[]
  startingLines Line[] @relation("startGarage")
  endingLines   Line[] @relation("endGarage")

  ownerId       Int @default(0)
  owner   User   @relation(fields: [ownerId], references: [id])

  @@index(name)
  @@index(location)
}

model Line {
  id               Int    @id @default(autoincrement())
  name             String @unique
  startName        String
  endName          String
  monthlyRidership Int
  startGarageId    Int
  endGarageId      Int

  // relation fields
  startGarage Garage     @relation("startGarage", fields: [startGarageId], references: [id])
  endGarage   Garage     @relation("endGarage", fields: [endGarageId], references: [id])
  lineStops   LineStop[]

  ownerId       Int @default(0)
  owner   User   @relation(fields: [ownerId], references: [id])
}

model Station {
  id            Int    @id @default(autoincrement())
  name          String
  stationSignId Int?

  lineStops   LineStop[]
  stationSign StationSign?

  ownerId       Int @default(0)
  owner   User   @relation(fields: [ownerId], references: [id])
}

model LineStop {
  id        Int @id @default(autoincrement())
  stationId Int
  lineId    Int

  direction            String // TRIP, ROUND-TRIP
  isServicedInWeekends Boolean

  station Station @relation(fields: [stationId], references: [id])
  line    Line    @relation(fields: [lineId], references: [id])

  ownerId       Int @default(0)
  owner   User   @relation(fields: [ownerId], references: [id])
}

model StationSign {
  id        Int @id @default(autoincrement())
  stationId Int @unique

  externalLinesInfo String
  hasBothSides      Boolean
  administration    String // CTP, PMCJ

  station Station @relation(fields: [stationId], references: [id])

  ownerId       Int @default(0)
  owner   User   @relation(fields: [ownerId], references: [id])
}
